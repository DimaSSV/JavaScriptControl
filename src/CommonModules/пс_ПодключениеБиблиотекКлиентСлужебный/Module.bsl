
// Описание
// 
// Параметры:
// 	ИмяКаталога	-	Строка
// 	ДополнительныеПараметры	-	Структура
Процедура РаспаковкаБиблиотекПослеПолученияВременногоКаталога(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ИмяКаталога", ИмяКаталога);
	
	МассивБиблиотек = Новый Массив;
	МассивБиблиотек.Добавить("monaco");
	ПриОпределенииВнешнихБиблиотек(МассивБиблиотек);
	ДополнительныеПараметры.Вставить("МассивБиблиотек", МассивБиблиотек);
	РаспаковатьБиблиотеки(ДополнительныеПараметры);
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ДополнительныеПараметры - Структура - Описание:
// * ИмяКаталога - Строка -
// * МассивБиблиотек - Массив
// * ПерезаписыватьСуществующие - Булево
Процедура РаспаковатьБиблиотеки(ДополнительныеПараметры)
	
	Если Не ДополнительныеПараметры.МассивБиблиотек.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	текущаяБиблиотека = ДополнительныеПараметры.МассивБиблиотек.Получить(0);

	КаталогРаспаковки = ДополнительныеПараметры.ИмяКаталога + текущаяБиблиотека + "\";
	ДополнительныеПараметры.Вставить("КаталогРаспаковки", КаталогРаспаковки);
	РаспаковатьКаталогПослеПроверкиНаличия = Новый ОписаниеОповещения(
		"РаспаковатьКаталогПослеПроверкиНаличия"
		, ЭтотОбъект
		, ДополнительныеПараметры);
	ФайлКаталога = Новый Файл(КаталогРаспаковки);
	ФайлКаталога.НачатьПроверкуСуществования(РаспаковатьКаталогПослеПроверкиНаличия);
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	Существует - Булево
// 	ДополнительныеПараметры - Структура - Описание:
// * ИмяКаталога - Строка -
// * МассивБиблиотек - Массив
// * ПерезаписыватьСуществующие - Булево
// * КаталогРаспаковки - Строка
Процедура РаспаковатьКаталогПослеПроверкиНаличия(Существует, ДополнительныеПараметры) Экспорт
	
		
	Если Существует Тогда 
		Если ДополнительныеПараметры.ПерезаписыватьСуществующие Тогда
			ОбработчикРаспаковкиПослеОчисткиКаталога
			= Новый ОписаниеОповещения("РаспаковатьПослеОчисткиКаталога"
				, ЭтотОбъект
				, ДополнительныеПараметры);
			НачатьУдалениеФайлов(ОбработчикРаспаковкиПослеОчисткиКаталога
				, ДополнительныеПараметры.КаталогРаспаковки
				, "*");	
		Иначе
			ДополнительныеПараметры.МассивБиблиотек.Удалить(0);
			РаспаковатьБиблиотеки(ДополнительныеПараметры);
		КонецЕсли;	
	Иначе
		ОбработчикРаспаковкиБиблиотекиВСуществующийКаталог 
		= Новый ОписаниеОповещения("РаспаковатьБиблиотекуВСуществующийКаталог"
			, ЭтотОбъект
			, ДополнительныеПараметры);
		НачатьСозданиеКаталога(ОбработчикРаспаковкиБиблиотекиВСуществующийКаталог
			, ДополнительныеПараметры.КаталогРаспаковки);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспаковатьПослеОчисткиКаталога(ДополнительныеПараметры) Экспорт
	
	РаспаковатьБиблиотекуВСуществующийКаталог(ДополнительныеПараметры.КаталогРаспаковки, ДополнительныеПараметры);
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ИмяКаталога - Строка
// 	ДополнительныеПараметры - Структура - Описание:
// * ИмяКаталога - Строка -
// * МассивБиблиотек - Массив
// * ПерезаписыватьСуществующие - Булево
// * КаталогРаспаковки - Строка
Процедура РаспаковатьБиблиотекуВСуществующийКаталог(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ТекущаяБиблиотека = ДополнительныеПараметры.МассивБиблиотек.Получить(0);
	АдресАрхива = пс_ПодключениеБиблиотекВызовСервера.ПоместитьВХранилищеОбщийМакет(ТекущаяБиблиотека);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресАрхива);
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		#Если Не ВебКлиент Тогда
		Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		Чтение = Новый ЧтениеZipФайла(Поток);
		Чтение.ИзвлечьВсе(ИмяКаталога);
		Чтение.Закрыть();
		#КонецЕсли
	КонецЕсли;
	УдалитьИзВременногоХранилища(АдресАрхива);	
	пс_СкриптыВызовСервера.ПоместитьВСерверныйКэш(стрШаблон("АдресаБиблиотек.%1", ТекущаяБиблиотека),ИмяКаталога);
	ДополнительныеПараметры.МассивБиблиотек.Удалить(0);
	РаспаковатьБиблиотеки(ДополнительныеПараметры);
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	МассивБиблиотек - Массив - Описание
Процедура ПриОпределенииВнешнихБиблиотек(МассивБиблиотек)
	//TODO: Реализация
КонецПроцедуры