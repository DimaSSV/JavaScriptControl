
//получение значений параметров клиента, требующих дызов сервера
//
// Параметры:
//  Обработчики  - Соответствие - ключ = имя параметра, Значение процедура обработчик, возвращающий значение
//
// Возвращаемое значение:
//   Соответстие   - соответствие Ключ = имя параметра, значение = значение
//
Функция УстановкаПараметровКлиента(Обработчики) Экспорт 

	Результат = Новый Соответствие;
	
	Для Каждого текОбработчик Из Обработчики Цикл
		Результат.Вставить(текОбработчик.Ключ, Вычислить(СтрШаблон("%1()", текОбработчик.Значение)));
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции // УстановкаПараметровКлиента()


// Производит запись данных в журнал регистрации
//
// Параметры:
//  Событие  - Соответствие - данные, полученные из js, для записи в журнал регистрации ("message", "eventName", "level")
//
Процедура ОбработкаСобытияЗаписьЖурналаРегистрации(Событие) Экспорт 

	Сообщение = Событие.Получить("message");
	Если Сообщение = Неопределено Тогда
		Возврат;
	Иначе
		Сообщение = Сообщение.value;
	КонецЕсли;
	
	ИмяСобытия = Событие.Получить("eventName");
	Если ИмяСобытия <> Неопределено Тогда
		ИмяСобытия = ИмяСобытия.value;
	КонецЕсли;
		
	Уровень = Событие.Получить("level");
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;		
	Иначе
		Уровень = СоответствиеУровнейЗаписиЖурнала().Получить(Уровень.value);
		Если Уровень = Неопределено Тогда
			Уровень = УровеньЖурналаРегистрации.Информация;	
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурнала(Сообщение, ИмяСобытия, Уровень);

КонецПроцедуры // ОбработкаСобытияЗаписьЖурналаРегистрации()


// Возвращает соответствие ключа и значение уровня журнала, для записи логов
//
// Возвращаемое значение:
//   Соответствие   - 
//
Функция СоответствиеУровнейЗаписиЖурнала()

	Результат = Новый Соответствие;
	Результат.Вставить("info", УровеньЖурналаРегистрации.Информация);
	Результат.Вставить("Информация", УровеньЖурналаРегистрации.Информация);
	Результат.Вставить("error", УровеньЖурналаРегистрации.Ошибка);
	Результат.Вставить("Ошибка", УровеньЖурналаРегистрации.Ошибка);
	Результат.Вставить("warning", УровеньЖурналаРегистрации.Предупреждение);
	Результат.Вставить("Предупреждение", УровеньЖурналаРегистрации.Предупреждение);
	Результат.Вставить("Note", УровеньЖурналаРегистрации.Примечание);
	Результат.Вставить("Примечание", УровеньЖурналаРегистрации.Примечания);

	Возврат Результат;

КонецФункции // СоответствиеУровнейЗаписиЖурнала()

// Записывает логи в журнал регистрации
//
// Параметры:
//  Сообщение  - Строка - текст сообщения логирования
//  ИмяСобытия  - имя события журнала регистрации
//  Уровень  - Строка - уровень записи журнала
//
Процедура ЗаписьЖурнала(Сообщение, ИмяСобытия = "Информация", Уровень = Неопределено)

	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	Если ПустаяСтрока(ИмяСобытия) Тогда
		ИмяСобытия = "Информация";
	КонецЕсли;
	ЗаписьЖурналаРегистрации(СтрШаблон("ПодключаемыеСкрипты.%1", ИмяСобытия), Уровень,,,Сообщение);	

КонецПроцедуры // ЗаписьЖурнала()




