
#Область ОбщегоНазначения

// Процедура инициализирует глобальную переменную для кеширования данных на клиенте
//
Процедура ПередНачаломРаботыСистемы() Экспорт
	
	пс_ПараметрыПриложения = Новый Соответствие;
	
	Обработчики = ПолучитьОбработчикиПолученияПараметров();
	// Установка параметров, требующих вызов сервера
	РезультатОбработкиНаСервере = пс_СкриптыВызовСервера.УстановкаПараметровКлиента(Обработчики);
	
	Для Каждого текПараметр Из РезультатОбработкиНаСервере Цикл
		пс_ПараметрыПриложения.Вставить(текПараметр.Ключ, текПараметр.Значение);
	КонецЦикла;

КонецПроцедуры

// Возвращает сохранённое значение из хранилища на клиенте
// Значение получается по переданному ключу
//
// Параметры:
//	Ключ - Любой - Ключ, для поиска значения в глобальном кеше
//
// Возвращаемое значение:
//   Любой   - Значение, сохранённое в глобальной клиентской переменной пс_ПараметрыПриложения
//
Функция ПолучитьИзКэша(Ключ) Экспорт 

	Возврат пс_ПараметрыПриложения[Ключ];

КонецФункции

// сохраняет значение в клиентком кэше
//
// Параметры:
//  Ключ  - Любой - Ключ для сохранения настройки
//  Значение  - Любой - значение для сохранения в клиентском кэше
//
Процедура ПоместитьВКэш(Ключ, Значение) Экспорт 

	пс_ПараметрыПриложения[Ключ] = Значение;

КонецПроцедуры

// Возвращает сохранённые данные формы. 
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, для который необходимо получить кэш
//
// Возвращаемое значение:
//   Соответствие  - Хранилище для кеширование данных формы
//
Функция ПолучитьКешФормы(Форма) Экспорт
	КлючНастройки = СтрШаблон("КешФормы.%1", Форма.УникальныйИдентификатор);
	Кеш = пс_ПараметрыПриложения[КлючНастройки];
	Если Кеш = Неопределено Тогда
		Кеш = Новый Соответствие;
		ПоместитьКешФормы(Форма ,Кеш);
	КонецЕсли;
	Возврат Кеш;
КонецФункции

//Сохраняет данные формы в клиентской переменной пс_ПараметрыПриложения.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, для который необходимо сохранить кэш
//  Кеш  - Соответствие - Данные, которые буут сохранены в хранилище
//
Процедура ПоместитьКешФормы(Форма, Кеш) Экспорт
	КлючНастройки = СтрШаблон("КешФормы.%1", Форма.УникальныйИдентификатор);
	пс_ПараметрыПриложения[КлючНастройки] = Кеш;
КонецПроцедуры

// Удаляет данные формы их хранилища
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма, для которой необходимо очистить хранилище
//
Процедура ОчиститьКешФормы(Форма) Экспорт
	КлючНастройки = СтрШаблон("КешФормы.%1", Форма.УникальныйИдентификатор);
	пс_ПараметрыПриложения.Удалить(КлючНастройки);
КонецПроцедуры

// Возвращает данные, сохранённые для переданного поля
//
// Параметры:
//  Ключ  - Любой - Ключ для получения сохранённого значения
//  		если передано неопределено, то будет возвращено соответствие со всеми сохранёнными данными
//  		если передан ключ, то будет возращено значение по переданному ключу.
//  Поле  - ПолеФормы - Поле, для которого будет получен кэш
//  		Если передано неопределено, то будет получено поле из переменной пс_ПараметрыПриложения["ПолеПоУмолчанию"]
//
// Возвращаемое значение:
//   Соответствие, Любой   - полный кэш формы, либо конкретное значение
//
Функция ПолучитьКешПоля(Ключ = Неопределено, Знач Поле = Неопределено) Экспорт
	Поле = ПолучитьПолеХТМЛ(Поле);
	Форма = НайтиФормуЭлемента(Поле);	
	КешФормы = ПолучитьКешФормы(Форма);
	КешПоля = КешФормы[Поле.Имя];
	Если КешПоля = Неопределено Тогда
		КешПоля = Новый Соответствие();
		КешФормы[Поле.имя] = КешПоля;
		ПоместитьКешФормы(Форма, КешФормы);
	КонецЕсли;
	Если Ключ = Неопределено Тогда
		Возврат КешПоля;
	Иначе
		Возврат КешПоля[Ключ];
	КонецЕсли;
КонецФункции

// Сохраняет данные в хранилище клиентского кэша.
//
// Параметры:
//  Ключ  - Любой - Ключ для сохранения значения в кэше поля
//  Значение  - Любой - значение, которое будет сохранено в кэшк поля по переданному ключу
//  Поле  - ПолеФормы - Поле, для которого будет сохранён кэш
//
Процедура ПоместитьКешПоля(Ключ, Значение, Знач Поле = Неопределено) Экспорт
	Поле = ПолучитьПолеХТМЛ(Поле);
	Форма = НайтиФормуЭлемента(Поле);
	КешФормы = ПолучитьКешФормы(Форма);
	КешПоля = ПолучитьКешПоля(,Поле);
	КешПоля[Ключ] = Значение;
	КешФормы[Поле.Имя] = КешПоля;
	ПоместитьКешФормы(Форма, КешФормы);
КонецПроцедуры

// функция возвращает соответствие клиентских параметров и обработчиков получения значения
//	В результате можно получить все параметры за один вызов сервера. Выполняется перед началом работы системы 
//
// Возвращаемое значение:
//   Соответствие   - Ключ = Имя параметра, Значение = функция получения значения.
//		Обработчик должен быт доступен на сервере и не содержать параметров. 
//		Пример:  "пс_СкриптыСерверПовтИсп.АдресОсновногоРасширенияСкриптов" 
//
Функция ПолучитьОбработчикиПолученияПараметров()

	Результат = Новый Соответствие;
	Результат.Вставить("АдресОсновногоРасширенияСкриптов", "пс_СкриптыСерверПовтИсп.АдресОсновногоРасширенияСкриптов");
	Возврат Результат;
	
КонецФункции // ПолучитьОбработчикиПолученияПараметров()
	
#КонецОбласти

#Область КешированиеПоляИнтерпритатора

// Сохраняет поле формы с видом "ПолеХТМЛ" для использования как поле по умолчанию.
//
// Параметры:
//   Поле - ПолеФормы - поле, которое будет использоваться по умолчанию
//   Тоесть в случае, когда в методы подсистемы параметр Поле не передаётся 
//
Процедура УстановитьПолеХТМЛПоУмолчанию(Поле) Экспорт 

	пс_ПараметрыПриложения["ПолеПоУмолчанию"] = Поле;		

КонецПроцедуры // УстановитьПолеХТМЛПоУмолчанию()

// Возвращает ранее сохранённое поле по умолчанию
//
// Возвращаемое значение:
//   ПолеФормы, Неопределено  - Значение поля по умолчанию
//
Функция ПолучитьПолеХТМЛПоУмолчанию() Экспорт 

	Возврат пс_ПараметрыПриложения["ПолеПоУмолчанию"];

КонецФункции // ПолучитьПолеХТМЛПоУмолчанию()

#КонецОбласти

#Область ДиалогиВзаимодействия

// Вызывает оповещение пользователя, с помощью javascript метода alert
//
// Параметры:
//  текстСообщения  - Строка - текст сообщения, который будет показан пользователю
//  ВычисляемоеСообщение  - Булево - Если передано Ложь, то сообщение показывается как есть.
//  			Если перено Истина, то текст сообщения будет вычислен в контексте "self"
//  Поле  - ПолеФормы - Поле формы, в котором будет выполнена процеура   
//
Процедура СообщитьСкриптом(Знач текстСообщения, ВычисляемоеСообщение = Ложь, Поле = Неопределено) Экспорт 

	Если ВычисляемоеСообщение Тогда
		Команда = СтрШаблон("alert(eval(%1))",текстСообщения);
	Иначе
		Команда = СтрШаблон("alert('%1')", текстСообщения);
	КонецЕсли;
	ВыполнитьКоманду(Команда, Поле);

КонецПроцедуры // СообщитьСкриптом()

// Вызывает вопрос пользователю, с помощью javascript метода confirm
//
// Параметры:
//  текстВопроса  - Строка - текст вопроса, который будет показан пользователю
//  ВычисляемоеСообщение  - Булево - Если передано Ложь, то текст вопроса показывается как есть.
//  			Если перено Истина, то текст вопроса будет вычислен в контексте "self"
//  Поле  - ПолеФормы - Поле формы, в котором будет выполнена процеура
//
// Возвращаемое значение:
//   Булево   - Истина, если была нажата кнопка Ok, в остальных случаях вернёт Ложь
//
Функция ВопросДаНет(Знач текстВопроса, ВычисляемоеСообщение = Ложь, Поле =  Неопределено) Экспорт 

	Если ВычисляемоеСообщение Тогда
		Команда = СтрШаблон("confirm(eval(%1))",текстВопроса);
	Иначе
		Команда = СтрШаблон("confirm('%1')", текстВопроса);
	КонецЕсли;
	Возврат ВыполнитьКоманду(Команда, Поле);

КонецФункции // ВопросДаНет()

#КонецОбласти

#Область Команды

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьКоманду(ТекстСкрипта, Поле = Неопределено) Экспорт 
			
	Результат = ИнтерприаторСкриптов(Поле).Eval(ТекстСкрипта);
	ПроверитьОтвет(Результат);
	Возврат Результат.result;

КонецФункции // ВыполнитьКоманду()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьМетодОбъекта(Объект = Null, ИмяМетода, Параметры = Неопределено, Поле = Неопределено) Экспорт 

	//@skip-warning
	Интерпритатор = ИнтерприаторСкриптов(Поле);
	Результат = Неопределено;
	ШаблонМетода = "Результат = Интерпритатор.methodCall(Объект, ""%1"", %2)";
	Выполнить(СтрШаблон(ШаблонМетода,ИмяМетода, СтрокаПередачиПараметровПоМассиву(Параметры)));
	ПроверитьОтвет(Результат);
	Возврат Результат.result;

КонецФункции // ВыполнитьМетодОбъекта()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗначениеСвойстваОбъекта(Объект = null, ИмяСвойства, Поле = Неопределено) Экспорт 

	Результат = ИнтерприаторСкриптов(Поле).propEval(Объект, ИмяСвойства);
	ПроверитьОтвет(Результат);
	Возврат Результат.result;

КонецФункции // ЗначениеСвойстваОбъекта()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПриНажатии(ДанныеСобытия, Поле = Неопределено) Экспорт 

	ИнтерприаторСкриптов(Поле);	
	Событие = ДанныеСобытия.Event;
	Если Событие.eventData1C <> Неопределено Тогда
		ОбработатьСобытиеИзСкрипта(Событие.eventData1C, Поле);
	КонецЕсли;

КонецПроцедуры // ПриНажатии()

#КонецОбласти

#Область СозданиеОбъектов

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НовыйМассив(Поле = Неопределено)

	Возврат ВыполнитьКоманду("[]", Поле);

КонецФункции // НовыйМассив()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НовыйОбъект(Поле = Неопределено)

	Возврат ВыполнитьКоманду("newObject()", Поле);	

КонецФункции // НовыйОбъект()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НовыйИменованныйМассив(Имя = "", Поле = Неопределено) Экспорт 

	Массив = НовыйМассив(Поле);
	Если Не ПустаяСтрока(Имя) Тогда
		ИменованиеОбъекта(Имя, Массив, Поле);
	КонецЕсли;
	Возврат Массив;

КонецФункции // НовыйИменованныйМассив()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НовыйИменованныйОбъект(Имя = "", Поле = Неопределено) Экспорт 

	Объект = НовыйОбъект(Поле);
	Если Не ПустаяСтрока(Имя) Тогда
		ИменованиеОбъекта(Имя, Объект, Поле);
	КонецЕсли;
	Возврат Объект;

КонецФункции // НовыйИменованныйОбъект()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НовыйМетод(Имя = "", ОпределениеМетода, Поле = Неопределено) Экспорт 

	Метод = ВыполнитьКоманду(ОпределениеМетода, Поле);
	Если Не ПустаяСтрока(Имя) Тогда
		ИменованиеОбъекта(Имя, Метод);
	КонецЕсли;
	Возврат Метод;

КонецФункции // НовыйМетод()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ИменованиеОбъекта(Имя, Объект, Поле = Неопределено) Экспорт 

	Результат = ИнтерприаторСкриптов(Поле).giveName(Имя, Объект);
	ПроверитьОтвет(Результат);

КонецПроцедуры // ИменованиеОбъекта()
	
#КонецОбласти

#Область WebSocket

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НовыйВебСокет(УРЛ, Протокол = Неопределено, ИмяПеременной = "", ОбработчикСоединение = Неопределено
		,ОбработчикОшибки = Неопределено, ОбработчикСообщения = Неопределено
		,ОбработчикЗакрытия = Неопределено , Поле = Неопределено) Экспорт 

	Шаблон = ?(Протокол = Неопределено, "new WebSocket('%1') %2","new WebSocket('%1' , '%2')");
	Сокет = ВыполнитьКоманду(СтрШаблон(Шаблон, УРЛ, Протокол), Поле);	
	Если Не ПустаяСтрока(ИмяПеременной) Тогда
		ИменованиеОбъекта(ИмяПеременной, Сокет, Поле);
	КонецЕсли;
	Если Не ОбработчикСоединение = Неопределено Тогда
		Если СтатусСокета(Сокет, Поле) = 1 Тогда
			ВыполнитьОбработкуОповещения(ОбработчикСоединение, Истина);
		КонецЕсли;
		СокетДобавитьОбработчикСоединения(Сокет, ОбработчикСоединение, Поле);
	КонецЕсли;
	Если Не ОбработчикОшибки = Неопределено Тогда
		СокетДобавитьОбработчикОшибки(Сокет, ОбработчикОшибки, Поле);
	КонецЕсли;
	Если Не ОбработчикСообщения = Неопределено Тогда
		СокетДобавитьОбработчикСообщения(Сокет, ОбработчикСообщения, Поле);
	КонецЕсли;
	Если Не ОбработчикЗакрытия = Неопределено Тогда
		СокетДобавитьОбработчикЗакрытия(Сокет, ОбработчикЗакрытия, Поле);
	КонецЕсли;
	Возврат Сокет;

КонецФункции // НовыйВебСокет()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СтатусСокета(ВебСокет, Поле = Неопределено) Экспорт 

		Статус = ЗначениеСвойстваОбъекта(ВебСокет, "readyState", Поле);
		Если Статус = 0 Тогда
			Возврат "Соединение";
	   	ИначеЕсли Статус = 1 Тогда
			Возврат "Открыто";
		ИначеЕсли Статус = 2 Тогда
			Возврат "Закрывается";
		ИначеЕсли Статус = 3 Тогда
			Возврат "Закрыто";
		КонецЕсли;

КонецФункции // СтатусСокета()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗакрытьСокет(ВебСокет, Поле = Неопределено) Экспорт 

	Возврат ВыполнитьМетодОбъекта(ВебСокет, "close");		

КонецФункции // ЗакрытьСокет()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СокетПослатьДанные(ВебСокет, Данные = "", Поле = Неопределено) Экспорт 

	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Данные);
	Возврат ВыполнитьМетодОбъекта(ВебСокет, "send", ПараметрыМетода, Поле);

КонецФункции // СокетПослатьДанные()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СокетДобавитьОбработчикСоединения(ВебСокет, Обработчик, Поле = Неопределено) Экспорт 
	
	Возврат ДобавитьОбработчикСобытия(ВебСокет, "connection", Обработчик, Поле);
	
КонецФункции // СокетДобавитьОбработчикСоединения()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СокетДобавитьОбработчикОшибки(ВебСокет, Обработчик, Поле = Неопределено) Экспорт 

	Возврат ДобавитьОбработчикСобытия(ВебСокет, "error", Обработчик, Поле);

КонецФункции // СокетДобавитьОбработчикОшибки()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СокетДобавитьОбработчикСообщения(ВебСокет, Обработчик, Поле = Неопределено) Экспорт 

	Возврат ДобавитьОбработчикСобытия(ВебСокет, "message", Обработчик, Поле);

КонецФункции // СокетДобавитьОбработчикСообщения()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СокетДобавитьОбработчикЗакрытия(ВебСокет, Обработчик, Поле = Неопределено) Экспорт 

	Возврат ДобавитьОбработчикСобытия(ВебСокет, "close", Обработчик, Поле);

КонецФункции // СокетДобавитьОбработчикЗакрытия()
	
#КонецОбласти

#Область ОбработчикиОжидания

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДобавитьОбработчикОжидания(ОбъектФункцияИлиОпределение, Параметры = Неопределено
	, Таймаут = 0, Поле = Неопределено) Экспорт 

	Если ТипЗнч(ОбъектФункцияИлиОпределение) = Тип("Строка") Тогда
		ОбъектФункцияИлиОпределение = НовыйМетод(,ОбъектФункцияИлиОпределение, Поле);
	КонецЕсли;
	Если Не ТипЗнч(ОбъектФункцияИлиОпределение) = Тип("ВнешнийОбъект") Тогда
		ВызватьИсключение "Ожидается внешний объект сооветствующий функции или определение анонимной функции";
	КонецЕсли;
	
	МенеджерОжиданий = ВыполнитьКоманду("timerManager", Поле);
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ОбъектФункцияИлиОпределение);
	ПараметрыМетода.Добавить(Таймаут);
	Если Параметры <> Неопределено И Параметры.Количество() Тогда
		Для Каждого текПараметр Из Параметры Цикл
			ПараметрыМетода.Добавить(текПараметр);
		КонецЦикла;
	КонецЕсли;
	Возврат ВыполнитьМетодОбъекта(МенеджерОжиданий, "addTimer", ПараметрыМетода, Поле);   
	
КонецФункции // ДобавитьОбработчикОжидания()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьАктивныеОбработчикиОжидания(Поле = Неопределено) Экспорт 

	Возврат ВыполнитьКоманду("timerManager.getTimers()", Поле);

КонецФункции // ПолучитьАктивныеОбработчикиОжидания()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДобавитьОбработчикПовторения(ОбъектФункцияИлиОпределение, Параметры = Неопределено
	, Таймаут = 0, Поле = Неопределено) Экспорт 

	Если ТипЗнч(ОбъектФункцияИлиОпределение) = Тип("Строка") Тогда
		ОбъектФункцияИлиОпределение = НовыйМетод(,ОбъектФункцияИлиОпределение, Поле);
	КонецЕсли;
	Если Не ТипЗнч(ОбъектФункцияИлиОпределение) = Тип("ВнешнийОбъект") Тогда
		ВызватьИсключение "Ожидается внешний объект сооветствующий функции или определение анонимной функции";
	КонецЕсли;
	
	МенеджерОжиданий = ВыполнитьКоманду("timerManager", Поле);
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ОбъектФункцияИлиОпределение);
	ПараметрыМетода.Добавить(Таймаут);
	Если Параметры <> Неопределено И Параметры.Количество() Тогда
		Для Каждого текПараметр Из Параметры Цикл
			ПараметрыМетода.Добавить(текПараметр);
		КонецЦикла;
	КонецЕсли;
	Возврат ВыполнитьМетодОбъекта(МенеджерОжиданий, "addInterval", ПараметрыМетода, Поле); 	

КонецФункции // ДобавитьОбработчикПовторения()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьАктивныеОбработчикиПовторения(Поле = Неопределено) Экспорт 

	Возврат ВыполнитьКоманду("timerManager.getIntervals()", Поле);

КонецФункции // ПолучитьАктивныеОбработчикиПовторения()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДобавитьПодпискуНаСобытия(ОбъектИлиКодПолученияОбъекта, МетодИлиОпределениеМетода
	, ТипСобытия = "click", ИспользоватьЗахват = Ложь, Поле = Неопределено) Экспорт 

	Если ТипЗнч(ОбъектИлиКодПолученияОбъекта) = Тип("Строка") Тогда
		ОбъектИлиКодПолученияОбъекта = ВыполнитьКоманду(ОбъектИлиКодПолученияОбъекта, Поле);
	КонецЕсли;
	Если Не ТипЗнч(ОбъектИлиКодПолученияОбъекта) = Тип("ВнешнийОбъект") Тогда
		ВызватьИсключение "Ожидается внешний объект или определение получения элемента html";
	КонецЕсли;
	
	Если ТипЗнч(МетодИлиОпределениеМетода) = Тип("Строка") Тогда
		МетодИлиОпределениеМетода = ВыполнитьКоманду(МетодИлиОпределениеМетода, Поле);
	КонецЕсли;
	Если Не ТипЗнч(МетодИлиОпределениеМетода) = Тип("ВнешнийОбъект") Тогда
		ВызватьИсключение "Ожидается внешний объект или определение получения элемента html";
	КонецЕсли;
	
	МенеджерСобытий = ВыполнитьКоманду("eventManager", Поле);
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ОбъектИлиКодПолученияОбъекта);
	ПараметрыМетода.Добавить(ТипСобытия);
	ПараметрыМетода.Добавить(МетодИлиОпределениеМетода);
	ПараметрыМетода.Добавить(ИспользоватьЗахват);
	Возврат ВыполнитьМетодОбъекта(МенеджерСобытий, "addEventListener", ПараметрыМетода, Поле);

КонецФункции // ДобавитьПодпискуНаСобытия()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьАктивныеПодпискиНаСобытия(Объект = Неопределено, Поле = Неопределено) Экспорт 

	Результат = ИнтерприаторСкриптов(Поле).eventManager.getEventListeners(Объект);			
	ПроверитьОтвет(Результат);
	Возврат Результат.result;
	
КонецФункции // ПолучитьАктивныеПодпискиНаСобытия()
	
#КонецОбласти

#Область СлужебныеФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПодключитьСкрипт(Знач ТекстСкрипта, Знач Поле = Неопределено) Экспорт 

	Интерпритатор = ИнтерприаторСкриптов(Поле);
	ЭлементСкрипт = Интерпритатор.document.createElement("script");
	Если ЭтоАдресВременногоХранилища(ТекстСкрипта) Тогда
		ЭлементСкрипт.setAttribute("src",ТекстСкрипта);
	Иначе
		ЭлементСкрипт.innerText = СтрШаблон("""%1""",ТекстСкрипта);
	КонецЕсли;
	ЭлементСкрипт.setAttribute("async",Ложь);
	Интерпритатор.document.head.appendChild(ЭлементСкрипт);
	Возврат ЭлементСкрипт;
	
КонецФункции // ПодключитьСкрипт()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнтерприаторСкриптов(Знач Поле = Неопределено) Экспорт 

	Поле = ПолучитьПолеХТМЛ(Поле);
	Контекст = Поле.Документ.defaultView;
	Если Контекст = Неопределено Тогда
		Контекст = Поле.Документ.parentWindow;	
	КонецЕсли;
	Возврат Контекст;

КонецФункции // КонтекстВыполнения()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКонтекст(ОбластьВидимости = Null, Обновить = Ложь, Поле = Неопределено) Экспорт 
	
		
	ИнтерприаторСкриптов(Поле);
	Кэш = пс_ПараметрыПриложения[Поле];
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	Контекст = Кэш.Получить(ОбластьВидимости);
	Если Контекст = Неопределено Тогда
		Контекст = Новый Соответствие;
	КонецЕсли;
	#Если Не ВебКлиент Тогда
	Если Не Контекст.Количество() Или Обновить Тогда
		Контекст.Очистить();
		РезультатВыполненияСкрипта = ИнтерприаторСкриптов(Поле).getContext(ОбластьВидимости);
		Если РезультатВыполненияСкрипта.error <> Неопределено Тогда
			ВызватьИсключение СтрШаблон("{%1, %2} %3",РезультатВыполненияСкрипта.error.line, РезультатВыполненияСкрипта.error.column, РезультатВыполненияСкрипта.error.description);
		КонецЕсли;
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(РезультатВыполненияСкрипта.result);
		РезультатДесериализации = ПрочитатьJSON(Чтение, Ложь);
		Для Каждого текИмя Из РезультатДесериализации Цикл
			Если Не ЗначениеЗаполнено(ОбластьВидимости) Тогда
				текИмя.Вставить("Значение", ИнтерприаторСкриптов(Поле).Eval(текИмя.name).result);
			Иначе
				текИмя.Вставить("Значение", текИмя.value);
			КонецЕсли;
			Контекст.Вставить(текИмя.name, текИмя);	
		КонецЦикла;
		Кэш.Вставить(ОбластьВидимости, Контекст);
		пс_ПараметрыПриложения.Вставить(Поле, Кэш);
	КонецЕсли;
	#КонецЕсли
	Возврат Контекст;

КонецФункции // ПолучитьКонтекст()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция  ОбработатьСобытиеИзСкрипта(Событие, Поле)

	Если Событие.event = "showMessage" Тогда
		Сообщить(Событие.params);
	ИначеЕсли Событие.event = "trowError" Тогда
		ВызватьИсключение Событие.params;
	ИначеЕсли Событие.event = "eventLog" Тогда
		СтруктураСобытия = ПолучитьКонтекст(Событие.params, Истина, Поле);
		пс_СкриптыВызовСервера.ОбработкаСобытияЗаписьЖурналаРегистрации(СтруктураСобытия);
	ИначеЕсли Событие.event = "callback1C" Тогда	
		Обработчик = ПолучитьКешПоля(КлючКешОбработчикОжидания(Событие.params.idHandler), Поле);
		ВыполнитьОбработкуОповещения(Обработчик, Событие.params);
	//ИначеЕсли пс_ОбработкаСобытийСкриптовПереопределяемый.ОбработатьСобытие(Событие, Поле) Тогда	
//	Иначе
//		Возврат ПользовательскаяОбработкаСобытий(Событие, Поле);
	КонецЕсли;
	Возврат Неопределено;

КонецФункции // ОбработатьСобытиеИзСкрипта()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПроверитьОтвет(Объект)

	Если Объект.error <> Неопределено Тогда
		ВызватьИсключение СтрШаблон("{%1, %2} %3",Объект.error.line, Объект.error.column, Объект.error.description);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОтвет()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//@skip-warning
Функция СтрокаПередачиПараметровПоМассиву(МассивПараметров)

	ПараметрыСтрока = "";
	Если МассивПараметров <> Неопределено И МассивПараметров.Количество() > 0 Тогда
		Для Индекс = 0 По МассивПараметров.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	Возврат ПараметрыСтрока;

КонецФункции // СтрокаПередачиПараметровПоМассиву()

// Возвращает форму владелец переданного элемента
//
// Параметры:
//  Поле  - ПолеФормы  
//
// Возвращаемое значение:
//   ФормаКлиентскогоПриложения   
//
Функция НайтиФормуЭлемента(Поле)

	Родитель = Поле.Родитель;
	Если ТипЗнч(Родитель) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Родитель;
	Иначе
		Возврат НайтиФормуЭлемента(Родитель);
	КонецЕсли;

КонецФункции // НайтиФормуЭлемента()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПолеХТМЛ(Поле = Неопределено)
	Если Поле = Неопределено Тогда
		Поле = ПолучитьПолеХТМЛПоУмолчанию();
		Если Поле = Неопределено Тогда
			ВызватьИсключение "Поле документа HTML не удалось определить";
		КонецЕсли;
	КонецЕсли;
	Возврат Поле;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция КлючКешОбработчикОжидания(ИД)
	Возврат СтрШаблон("ОбработчикиОжидания.%1", ИД);
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ДобавитьОбработчикСобытия(ОбъектОтслеживания, Событие, Обработчик, Поле = Неопределено) Экспорт
	ИДОбработчика = Новый УникальныйИдентификатор;
	
	ИДДляКэш = КлючКешОбработчикОжидания(ИДОбработчика);
	ПоместитьКешПоля(ИДДляКэш, Обработчик, Поле);
	ШаблонМетода = "(eventData) => { eventData.idHandler = '%1'; return sendEvent('callback1C', eventData); }";
	Скрипт = ВыполнитьКоманду(СтрШаблон(ШаблонМетода,ИДОбработчика), Поле);
	Возврат ДобавитьПодпискуНаСобытия(ОбъектОтслеживания, Скрипт, Событие,,Поле);	

КонецФункции // ДобавитьОбработчикСобытия()

#КонецОбласти


